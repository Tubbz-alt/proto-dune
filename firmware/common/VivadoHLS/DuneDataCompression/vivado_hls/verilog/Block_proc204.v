// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc204 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        monitor_cfg_m_mode,
        monitor_cfg_m_mode_ap_vld,
        monitor_cfg_m_ncfgs,
        monitor_cfg_m_ncfgs_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [31:0] monitor_cfg_m_mode;
output   monitor_cfg_m_mode_ap_vld;
output  [31:0] monitor_cfg_m_ncfgs;
output   monitor_cfg_m_ncfgs_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg monitor_cfg_m_mode_ap_vld;
reg monitor_cfg_m_ncfgs_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] lclMonitorCfg_m_ncfg;
reg   [0:0] First_1;
reg   [31:0] lclMonitorCfg_m_mode;
reg    ap_block_state1;
wire   [31:0] p_tmp_i_fu_80_p3;
wire   [0:0] tmp_i_fu_60_p2;
reg   [31:0] gbl_m_ncfgs_write_as_reg_50;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_i_255_fu_74_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_condition_40;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 lclMonitorCfg_m_ncfg = 32'd0;
#0 First_1 = 1'd1;
#0 lclMonitorCfg_m_mode = 32'd0;
#0 gbl_m_ncfgs_write_as_reg_50 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        First_1 <= 1'd1;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_i_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            First_1 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        gbl_m_ncfgs_write_as_reg_50 <= 32'd0;
    end else begin
        if ((1'b1 == ap_condition_40)) begin
            if ((tmp_i_fu_60_p2 == 1'd0)) begin
                gbl_m_ncfgs_write_as_reg_50 <= p_tmp_i_fu_80_p3;
            end else if ((tmp_i_fu_60_p2 == 1'd1)) begin
                gbl_m_ncfgs_write_as_reg_50 <= lclMonitorCfg_m_ncfg;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        lclMonitorCfg_m_mode <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_i_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            lclMonitorCfg_m_mode <= p_read1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        lclMonitorCfg_m_ncfg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_i_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            lclMonitorCfg_m_ncfg <= p_tmp_i_fu_80_p3;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        monitor_cfg_m_mode_ap_vld = 1'b1;
    end else begin
        monitor_cfg_m_mode_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        monitor_cfg_m_ncfgs_ap_vld = 1'b1;
    end else begin
        monitor_cfg_m_ncfgs_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_condition_40 = (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1));
end

assign monitor_cfg_m_mode = lclMonitorCfg_m_mode;

assign monitor_cfg_m_ncfgs = gbl_m_ncfgs_write_as_reg_50;

assign p_tmp_i_fu_80_p3 = ((First_1[0:0] === 1'b1) ? 32'd1 : tmp_i_255_fu_74_p2);

assign tmp_i_255_fu_74_p2 = (lclMonitorCfg_m_ncfg + 32'd1);

assign tmp_i_fu_60_p2 = ((p_read == 32'd0) ? 1'b1 : 1'b0);

endmodule //Block_proc204
