// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mAxis_TDATA,
        mAxis_TVALID,
        mAxis_TREADY,
        mAxis_TKEEP,
        mAxis_TSTRB,
        mAxis_TUSER,
        mAxis_TLAST,
        mAxis_TID,
        mAxis_TDEST,
        w64,
        mAxis_TDATA_blk_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] mAxis_TDATA;
output   mAxis_TVALID;
input   mAxis_TREADY;
output  [7:0] mAxis_TKEEP;
output  [7:0] mAxis_TSTRB;
output  [3:0] mAxis_TUSER;
output  [0:0] mAxis_TLAST;
output  [0:0] mAxis_TID;
output  [0:0] mAxis_TDEST;
input  [63:0] w64;
output   mAxis_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mAxis_TVALID;
reg mAxis_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_sig_ioackin_mAxis_TREADY;
reg    ap_reg_ioackin_mAxis_TREADY;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_reg_ioackin_mAxis_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_mAxis_TREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((ap_start == 1'b0) | (ap_sig_ioackin_mAxis_TREADY == 1'b0))) begin
                ap_reg_ioackin_mAxis_TREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (mAxis_TREADY == 1'b1))) begin
                ap_reg_ioackin_mAxis_TREADY <= 1'b1;
            end
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (ap_sig_ioackin_mAxis_TREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_sig_ioackin_mAxis_TREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mAxis_TREADY == 1'b0)) begin
        ap_sig_ioackin_mAxis_TREADY = mAxis_TREADY;
    end else begin
        ap_sig_ioackin_mAxis_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mAxis_TDATA_blk_n = mAxis_TREADY;
    end else begin
        mAxis_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_mAxis_TREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        mAxis_TVALID = 1'b1;
    end else begin
        mAxis_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign mAxis_TDATA = w64;

assign mAxis_TDEST = 1'd0;

assign mAxis_TID = 1'd0;

assign mAxis_TKEEP = 8'd255;

assign mAxis_TLAST = 1'd0;

assign mAxis_TSTRB = 8'd0;

assign mAxis_TUSER = 4'd0;

endmodule //write_r
