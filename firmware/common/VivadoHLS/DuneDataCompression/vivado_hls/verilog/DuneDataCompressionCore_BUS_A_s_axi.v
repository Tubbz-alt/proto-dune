// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module DuneDataCompressionCore_BUS_A_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 10,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    output wire [31:0]                   config_init,
    output wire [31:0]                   config_mode,
    output wire [31:0]                   config_limit,
    input  wire [6:0]                    config_chns_disabled_address0,
    input  wire                          config_chns_disabled_ce0,
    input  wire                          config_chns_disabled_we0,
    input  wire [0:0]                    config_chns_disabled_d0,
    input  wire [31:0]                   monitor_common_pattern,
    input  wire                          monitor_common_pattern_ap_vld,
    input  wire [31:0]                   monitor_cfg_m_mode,
    input  wire                          monitor_cfg_m_mode_ap_vld,
    input  wire [31:0]                   monitor_cfg_m_ncfgs,
    input  wire                          monitor_cfg_m_ncfgs_ap_vld,
    output wire [31:0]                   monitor_read_summary_mask_V,
    output wire [31:0]                   monitor_read_summary_nframes,
    input  wire [1:0]                    monitor_read_summary_nStates_address0,
    input  wire                          monitor_read_summary_nStates_ce0,
    input  wire                          monitor_read_summary_nStates_we0,
    input  wire [31:0]                   monitor_read_summary_nStates_d0,
    input  wire [2:0]                    monitor_read_errs_nFrameErrs_address0,
    input  wire                          monitor_read_errs_nFrameErrs_ce0,
    input  wire                          monitor_read_errs_nFrameErrs_we0,
    input  wire [31:0]                   monitor_read_errs_nFrameErrs_d0,
    input  wire [4:0]                    monitor_read_errs_nWibErrs_address0,
    input  wire                          monitor_read_errs_nWibErrs_ce0,
    input  wire                          monitor_read_errs_nWibErrs_we0,
    input  wire [31:0]                   monitor_read_errs_nWibErrs_d0,
    output wire [31:0]                   monitor_write_nbytes,
    output wire [31:0]                   monitor_write_npromoted,
    output wire [31:0]                   monitor_write_ndropped,
    output wire [31:0]                   monitor_write_npackets
);
//------------------------Address Info-------------------
// 0x000 : Control signals
//         bit 0  - ap_start (Read/Write/COH)
//         bit 1  - ap_done (Read/COR)
//         bit 2  - ap_idle (Read)
//         bit 3  - ap_ready (Read)
//         bit 7  - auto_restart (Read/Write)
//         others - reserved
// 0x004 : Global Interrupt Enable Register
//         bit 0  - Global Interrupt Enable (Read/Write)
//         others - reserved
// 0x008 : IP Interrupt Enable Register (Read/Write)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x00c : IP Interrupt Status Register (Read/TOW)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x010 : Data signal of config_init
//         bit 31~0 - config_init[31:0] (Read/Write)
// 0x014 : reserved
// 0x018 : Data signal of config_mode
//         bit 31~0 - config_mode[31:0] (Read/Write)
// 0x01c : reserved
// 0x020 : Data signal of config_limit
//         bit 31~0 - config_limit[31:0] (Read/Write)
// 0x024 : reserved
// 0x100 : Data signal of monitor_common_pattern
//         bit 31~0 - monitor_common_pattern[31:0] (Read)
// 0x104 : Control signal of monitor_common_pattern
//         bit 0  - monitor_common_pattern_ap_vld (Read/COR)
//         others - reserved
// 0x108 : Data signal of monitor_cfg_m_mode
//         bit 31~0 - monitor_cfg_m_mode[31:0] (Read)
// 0x10c : Control signal of monitor_cfg_m_mode
//         bit 0  - monitor_cfg_m_mode_ap_vld (Read/COR)
//         others - reserved
// 0x110 : Data signal of monitor_cfg_m_ncfgs
//         bit 31~0 - monitor_cfg_m_ncfgs[31:0] (Read)
// 0x114 : Control signal of monitor_cfg_m_ncfgs
//         bit 0  - monitor_cfg_m_ncfgs_ap_vld (Read/COR)
//         others - reserved
// 0x118 : Data signal of monitor_read_summary_mask_V
//         bit 31~0 - monitor_read_summary_mask_V[31:0] (Read/Write)
// 0x11c : reserved
// 0x120 : Data signal of monitor_read_summary_nframes
//         bit 31~0 - monitor_read_summary_nframes[31:0] (Read/Write)
// 0x124 : reserved
// 0x200 : Data signal of monitor_write_nbytes
//         bit 31~0 - monitor_write_nbytes[31:0] (Read/Write)
// 0x204 : reserved
// 0x208 : Data signal of monitor_write_npromoted
//         bit 31~0 - monitor_write_npromoted[31:0] (Read/Write)
// 0x20c : reserved
// 0x210 : Data signal of monitor_write_ndropped
//         bit 31~0 - monitor_write_ndropped[31:0] (Read/Write)
// 0x214 : reserved
// 0x218 : Data signal of monitor_write_npackets
//         bit 31~0 - monitor_write_npackets[31:0] (Read/Write)
// 0x21c : reserved
// 0x080 ~
// 0x0ff : Memory 'config_chns_disabled' (128 * 1b)
//         Word n : bit [ 0: 0] - config_chns_disabled[4n]
//                  bit [ 8: 8] - config_chns_disabled[4n+1]
//                  bit [16:16] - config_chns_disabled[4n+2]
//                  bit [24:24] - config_chns_disabled[4n+3]
//                  others      - reserved
// 0x130 ~
// 0x13f : Memory 'monitor_read_summary_nStates' (4 * 32b)
//         Word n : bit [31:0] - monitor_read_summary_nStates[n]
// 0x140 ~
// 0x15f : Memory 'monitor_read_errs_nFrameErrs' (5 * 32b)
//         Word n : bit [31:0] - monitor_read_errs_nFrameErrs[n]
// 0x180 ~
// 0x1ff : Memory 'monitor_read_errs_nWibErrs' (24 * 32b)
//         Word n : bit [31:0] - monitor_read_errs_nWibErrs[n]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                             = 10'h000,
    ADDR_GIE                                 = 10'h004,
    ADDR_IER                                 = 10'h008,
    ADDR_ISR                                 = 10'h00c,
    ADDR_CONFIG_INIT_DATA_0                  = 10'h010,
    ADDR_CONFIG_INIT_CTRL                    = 10'h014,
    ADDR_CONFIG_MODE_DATA_0                  = 10'h018,
    ADDR_CONFIG_MODE_CTRL                    = 10'h01c,
    ADDR_CONFIG_LIMIT_DATA_0                 = 10'h020,
    ADDR_CONFIG_LIMIT_CTRL                   = 10'h024,
    ADDR_MONITOR_COMMON_PATTERN_DATA_0       = 10'h100,
    ADDR_MONITOR_COMMON_PATTERN_CTRL         = 10'h104,
    ADDR_MONITOR_CFG_M_MODE_DATA_0           = 10'h108,
    ADDR_MONITOR_CFG_M_MODE_CTRL             = 10'h10c,
    ADDR_MONITOR_CFG_M_NCFGS_DATA_0          = 10'h110,
    ADDR_MONITOR_CFG_M_NCFGS_CTRL            = 10'h114,
    ADDR_MONITOR_READ_SUMMARY_MASK_V_DATA_0  = 10'h118,
    ADDR_MONITOR_READ_SUMMARY_MASK_V_CTRL    = 10'h11c,
    ADDR_MONITOR_READ_SUMMARY_NFRAMES_DATA_0 = 10'h120,
    ADDR_MONITOR_READ_SUMMARY_NFRAMES_CTRL   = 10'h124,
    ADDR_MONITOR_WRITE_NBYTES_DATA_0         = 10'h200,
    ADDR_MONITOR_WRITE_NBYTES_CTRL           = 10'h204,
    ADDR_MONITOR_WRITE_NPROMOTED_DATA_0      = 10'h208,
    ADDR_MONITOR_WRITE_NPROMOTED_CTRL        = 10'h20c,
    ADDR_MONITOR_WRITE_NDROPPED_DATA_0       = 10'h210,
    ADDR_MONITOR_WRITE_NDROPPED_CTRL         = 10'h214,
    ADDR_MONITOR_WRITE_NPACKETS_DATA_0       = 10'h218,
    ADDR_MONITOR_WRITE_NPACKETS_CTRL         = 10'h21c,
    ADDR_CONFIG_CHNS_DISABLED_BASE           = 10'h080,
    ADDR_CONFIG_CHNS_DISABLED_HIGH           = 10'h0ff,
    ADDR_MONITOR_READ_SUMMARY_NSTATES_BASE   = 10'h130,
    ADDR_MONITOR_READ_SUMMARY_NSTATES_HIGH   = 10'h13f,
    ADDR_MONITOR_READ_ERRS_NFRAMEERRS_BASE   = 10'h140,
    ADDR_MONITOR_READ_ERRS_NFRAMEERRS_HIGH   = 10'h15f,
    ADDR_MONITOR_READ_ERRS_NWIBERRS_BASE     = 10'h180,
    ADDR_MONITOR_READ_ERRS_NWIBERRS_HIGH     = 10'h1ff,
    WRIDLE                                   = 2'd0,
    WRDATA                                   = 2'd1,
    WRRESP                                   = 2'd2,
    WRRESET                                  = 2'd3,
    RDIDLE                                   = 2'd0,
    RDDATA                                   = 2'd1,
    RDRESET                                  = 2'd2,
    ADDR_BITS         = 10;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_config_init = 'b0;
    reg  [31:0]                   int_config_mode = 'b0;
    reg  [31:0]                   int_config_limit = 'b0;
    reg  [31:0]                   int_monitor_common_pattern = 'b0;
    reg                           int_monitor_common_pattern_ap_vld;
    reg  [31:0]                   int_monitor_cfg_m_mode = 'b0;
    reg                           int_monitor_cfg_m_mode_ap_vld;
    reg  [31:0]                   int_monitor_cfg_m_ncfgs = 'b0;
    reg                           int_monitor_cfg_m_ncfgs_ap_vld;
    reg  [31:0]                   int_monitor_read_summary_mask_V = 'b0;
    reg  [31:0]                   int_monitor_read_summary_nframes = 'b0;
    reg  [31:0]                   int_monitor_write_nbytes = 'b0;
    reg  [31:0]                   int_monitor_write_npromoted = 'b0;
    reg  [31:0]                   int_monitor_write_ndropped = 'b0;
    reg  [31:0]                   int_monitor_write_npackets = 'b0;
    // memory signals
    wire [4:0]                    int_config_chns_disabled_address0;
    wire                          int_config_chns_disabled_ce0;
    wire                          int_config_chns_disabled_we0;
    wire [3:0]                    int_config_chns_disabled_be0;
    wire [31:0]                   int_config_chns_disabled_d0;
    wire [31:0]                   int_config_chns_disabled_q0;
    wire [4:0]                    int_config_chns_disabled_address1;
    wire                          int_config_chns_disabled_ce1;
    wire                          int_config_chns_disabled_we1;
    wire [3:0]                    int_config_chns_disabled_be1;
    wire [31:0]                   int_config_chns_disabled_d1;
    wire [31:0]                   int_config_chns_disabled_q1;
    reg                           int_config_chns_disabled_read;
    reg                           int_config_chns_disabled_write;
    reg  [1:0]                    int_config_chns_disabled_shift;
    wire [1:0]                    int_monitor_read_summary_nStates_address0;
    wire                          int_monitor_read_summary_nStates_ce0;
    wire                          int_monitor_read_summary_nStates_we0;
    wire [3:0]                    int_monitor_read_summary_nStates_be0;
    wire [31:0]                   int_monitor_read_summary_nStates_d0;
    wire [31:0]                   int_monitor_read_summary_nStates_q0;
    wire [1:0]                    int_monitor_read_summary_nStates_address1;
    wire                          int_monitor_read_summary_nStates_ce1;
    wire                          int_monitor_read_summary_nStates_we1;
    wire [3:0]                    int_monitor_read_summary_nStates_be1;
    wire [31:0]                   int_monitor_read_summary_nStates_d1;
    wire [31:0]                   int_monitor_read_summary_nStates_q1;
    reg                           int_monitor_read_summary_nStates_read;
    reg                           int_monitor_read_summary_nStates_write;
    wire [2:0]                    int_monitor_read_errs_nFrameErrs_address0;
    wire                          int_monitor_read_errs_nFrameErrs_ce0;
    wire                          int_monitor_read_errs_nFrameErrs_we0;
    wire [3:0]                    int_monitor_read_errs_nFrameErrs_be0;
    wire [31:0]                   int_monitor_read_errs_nFrameErrs_d0;
    wire [31:0]                   int_monitor_read_errs_nFrameErrs_q0;
    wire [2:0]                    int_monitor_read_errs_nFrameErrs_address1;
    wire                          int_monitor_read_errs_nFrameErrs_ce1;
    wire                          int_monitor_read_errs_nFrameErrs_we1;
    wire [3:0]                    int_monitor_read_errs_nFrameErrs_be1;
    wire [31:0]                   int_monitor_read_errs_nFrameErrs_d1;
    wire [31:0]                   int_monitor_read_errs_nFrameErrs_q1;
    reg                           int_monitor_read_errs_nFrameErrs_read;
    reg                           int_monitor_read_errs_nFrameErrs_write;
    wire [4:0]                    int_monitor_read_errs_nWibErrs_address0;
    wire                          int_monitor_read_errs_nWibErrs_ce0;
    wire                          int_monitor_read_errs_nWibErrs_we0;
    wire [3:0]                    int_monitor_read_errs_nWibErrs_be0;
    wire [31:0]                   int_monitor_read_errs_nWibErrs_d0;
    wire [31:0]                   int_monitor_read_errs_nWibErrs_q0;
    wire [4:0]                    int_monitor_read_errs_nWibErrs_address1;
    wire                          int_monitor_read_errs_nWibErrs_ce1;
    wire                          int_monitor_read_errs_nWibErrs_we1;
    wire [3:0]                    int_monitor_read_errs_nWibErrs_be1;
    wire [31:0]                   int_monitor_read_errs_nWibErrs_d1;
    wire [31:0]                   int_monitor_read_errs_nWibErrs_q1;
    reg                           int_monitor_read_errs_nWibErrs_read;
    reg                           int_monitor_read_errs_nWibErrs_write;

//------------------------Instantiation------------------
// int_config_chns_disabled
DuneDataCompressionCore_BUS_A_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 32 )
) int_config_chns_disabled (
    .clk0     ( ACLK ),
    .address0 ( int_config_chns_disabled_address0 ),
    .ce0      ( int_config_chns_disabled_ce0 ),
    .we0      ( int_config_chns_disabled_we0 ),
    .be0      ( int_config_chns_disabled_be0 ),
    .d0       ( int_config_chns_disabled_d0 ),
    .q0       ( int_config_chns_disabled_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_config_chns_disabled_address1 ),
    .ce1      ( int_config_chns_disabled_ce1 ),
    .we1      ( int_config_chns_disabled_we1 ),
    .be1      ( int_config_chns_disabled_be1 ),
    .d1       ( int_config_chns_disabled_d1 ),
    .q1       ( int_config_chns_disabled_q1 )
);
// int_monitor_read_summary_nStates
DuneDataCompressionCore_BUS_A_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4 )
) int_monitor_read_summary_nStates (
    .clk0     ( ACLK ),
    .address0 ( int_monitor_read_summary_nStates_address0 ),
    .ce0      ( int_monitor_read_summary_nStates_ce0 ),
    .we0      ( int_monitor_read_summary_nStates_we0 ),
    .be0      ( int_monitor_read_summary_nStates_be0 ),
    .d0       ( int_monitor_read_summary_nStates_d0 ),
    .q0       ( int_monitor_read_summary_nStates_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_monitor_read_summary_nStates_address1 ),
    .ce1      ( int_monitor_read_summary_nStates_ce1 ),
    .we1      ( int_monitor_read_summary_nStates_we1 ),
    .be1      ( int_monitor_read_summary_nStates_be1 ),
    .d1       ( int_monitor_read_summary_nStates_d1 ),
    .q1       ( int_monitor_read_summary_nStates_q1 )
);
// int_monitor_read_errs_nFrameErrs
DuneDataCompressionCore_BUS_A_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 5 )
) int_monitor_read_errs_nFrameErrs (
    .clk0     ( ACLK ),
    .address0 ( int_monitor_read_errs_nFrameErrs_address0 ),
    .ce0      ( int_monitor_read_errs_nFrameErrs_ce0 ),
    .we0      ( int_monitor_read_errs_nFrameErrs_we0 ),
    .be0      ( int_monitor_read_errs_nFrameErrs_be0 ),
    .d0       ( int_monitor_read_errs_nFrameErrs_d0 ),
    .q0       ( int_monitor_read_errs_nFrameErrs_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_monitor_read_errs_nFrameErrs_address1 ),
    .ce1      ( int_monitor_read_errs_nFrameErrs_ce1 ),
    .we1      ( int_monitor_read_errs_nFrameErrs_we1 ),
    .be1      ( int_monitor_read_errs_nFrameErrs_be1 ),
    .d1       ( int_monitor_read_errs_nFrameErrs_d1 ),
    .q1       ( int_monitor_read_errs_nFrameErrs_q1 )
);
// int_monitor_read_errs_nWibErrs
DuneDataCompressionCore_BUS_A_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 24 )
) int_monitor_read_errs_nWibErrs (
    .clk0     ( ACLK ),
    .address0 ( int_monitor_read_errs_nWibErrs_address0 ),
    .ce0      ( int_monitor_read_errs_nWibErrs_ce0 ),
    .we0      ( int_monitor_read_errs_nWibErrs_we0 ),
    .be0      ( int_monitor_read_errs_nWibErrs_be0 ),
    .d0       ( int_monitor_read_errs_nWibErrs_d0 ),
    .q0       ( int_monitor_read_errs_nWibErrs_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_monitor_read_errs_nWibErrs_address1 ),
    .ce1      ( int_monitor_read_errs_nWibErrs_ce1 ),
    .we1      ( int_monitor_read_errs_nWibErrs_we1 ),
    .be1      ( int_monitor_read_errs_nWibErrs_be1 ),
    .d1       ( int_monitor_read_errs_nWibErrs_d1 ),
    .q1       ( int_monitor_read_errs_nWibErrs_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_config_chns_disabled_read & !int_monitor_read_summary_nStates_read & !int_monitor_read_errs_nFrameErrs_read & !int_monitor_read_errs_nWibErrs_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_CONFIG_INIT_DATA_0: begin
                    rdata <= int_config_init[31:0];
                end
                ADDR_CONFIG_MODE_DATA_0: begin
                    rdata <= int_config_mode[31:0];
                end
                ADDR_CONFIG_LIMIT_DATA_0: begin
                    rdata <= int_config_limit[31:0];
                end
                ADDR_MONITOR_COMMON_PATTERN_DATA_0: begin
                    rdata <= int_monitor_common_pattern[31:0];
                end
                ADDR_MONITOR_COMMON_PATTERN_CTRL: begin
                    rdata[0] <= int_monitor_common_pattern_ap_vld;
                end
                ADDR_MONITOR_CFG_M_MODE_DATA_0: begin
                    rdata <= int_monitor_cfg_m_mode[31:0];
                end
                ADDR_MONITOR_CFG_M_MODE_CTRL: begin
                    rdata[0] <= int_monitor_cfg_m_mode_ap_vld;
                end
                ADDR_MONITOR_CFG_M_NCFGS_DATA_0: begin
                    rdata <= int_monitor_cfg_m_ncfgs[31:0];
                end
                ADDR_MONITOR_CFG_M_NCFGS_CTRL: begin
                    rdata[0] <= int_monitor_cfg_m_ncfgs_ap_vld;
                end
                ADDR_MONITOR_READ_SUMMARY_MASK_V_DATA_0: begin
                    rdata <= int_monitor_read_summary_mask_V[31:0];
                end
                ADDR_MONITOR_READ_SUMMARY_NFRAMES_DATA_0: begin
                    rdata <= int_monitor_read_summary_nframes[31:0];
                end
                ADDR_MONITOR_WRITE_NBYTES_DATA_0: begin
                    rdata <= int_monitor_write_nbytes[31:0];
                end
                ADDR_MONITOR_WRITE_NPROMOTED_DATA_0: begin
                    rdata <= int_monitor_write_npromoted[31:0];
                end
                ADDR_MONITOR_WRITE_NDROPPED_DATA_0: begin
                    rdata <= int_monitor_write_ndropped[31:0];
                end
                ADDR_MONITOR_WRITE_NPACKETS_DATA_0: begin
                    rdata <= int_monitor_write_npackets[31:0];
                end
            endcase
        end
        else if (int_config_chns_disabled_read) begin
            rdata <= int_config_chns_disabled_q1;
        end
        else if (int_monitor_read_summary_nStates_read) begin
            rdata <= int_monitor_read_summary_nStates_q1;
        end
        else if (int_monitor_read_errs_nFrameErrs_read) begin
            rdata <= int_monitor_read_errs_nFrameErrs_q1;
        end
        else if (int_monitor_read_errs_nWibErrs_read) begin
            rdata <= int_monitor_read_errs_nWibErrs_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt                    = int_gie & (|int_isr);
assign ap_start                     = int_ap_start;
assign config_init                  = int_config_init;
assign config_mode                  = int_config_mode;
assign config_limit                 = int_config_limit;
assign monitor_read_summary_mask_V  = int_monitor_read_summary_mask_V;
assign monitor_read_summary_nframes = int_monitor_read_summary_nframes;
assign monitor_write_nbytes         = int_monitor_write_nbytes;
assign monitor_write_npromoted      = int_monitor_write_npromoted;
assign monitor_write_ndropped       = int_monitor_write_ndropped;
assign monitor_write_npackets       = int_monitor_write_npackets;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_ap_idle
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_idle <= ap_idle;
    end
end

// int_ap_ready
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_ready <= ap_ready;
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_config_init[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_config_init[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONFIG_INIT_DATA_0)
            int_config_init[31:0] <= (WDATA[31:0] & wmask) | (int_config_init[31:0] & ~wmask);
    end
end

// int_config_mode[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_config_mode[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONFIG_MODE_DATA_0)
            int_config_mode[31:0] <= (WDATA[31:0] & wmask) | (int_config_mode[31:0] & ~wmask);
    end
end

// int_config_limit[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_config_limit[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONFIG_LIMIT_DATA_0)
            int_config_limit[31:0] <= (WDATA[31:0] & wmask) | (int_config_limit[31:0] & ~wmask);
    end
end

// int_monitor_common_pattern
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_common_pattern <= 0;
    else if (ACLK_EN) begin
        if (monitor_common_pattern_ap_vld)
            int_monitor_common_pattern <= monitor_common_pattern;
    end
end

// int_monitor_common_pattern_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_common_pattern_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (monitor_common_pattern_ap_vld)
            int_monitor_common_pattern_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_MONITOR_COMMON_PATTERN_CTRL)
            int_monitor_common_pattern_ap_vld <= 1'b0; // clear on read
    end
end

// int_monitor_cfg_m_mode
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_cfg_m_mode <= 0;
    else if (ACLK_EN) begin
        if (monitor_cfg_m_mode_ap_vld)
            int_monitor_cfg_m_mode <= monitor_cfg_m_mode;
    end
end

// int_monitor_cfg_m_mode_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_cfg_m_mode_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (monitor_cfg_m_mode_ap_vld)
            int_monitor_cfg_m_mode_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_MONITOR_CFG_M_MODE_CTRL)
            int_monitor_cfg_m_mode_ap_vld <= 1'b0; // clear on read
    end
end

// int_monitor_cfg_m_ncfgs
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_cfg_m_ncfgs <= 0;
    else if (ACLK_EN) begin
        if (monitor_cfg_m_ncfgs_ap_vld)
            int_monitor_cfg_m_ncfgs <= monitor_cfg_m_ncfgs;
    end
end

// int_monitor_cfg_m_ncfgs_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_cfg_m_ncfgs_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (monitor_cfg_m_ncfgs_ap_vld)
            int_monitor_cfg_m_ncfgs_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_MONITOR_CFG_M_NCFGS_CTRL)
            int_monitor_cfg_m_ncfgs_ap_vld <= 1'b0; // clear on read
    end
end

// int_monitor_read_summary_mask_V[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_read_summary_mask_V[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MONITOR_READ_SUMMARY_MASK_V_DATA_0)
            int_monitor_read_summary_mask_V[31:0] <= (WDATA[31:0] & wmask) | (int_monitor_read_summary_mask_V[31:0] & ~wmask);
    end
end

// int_monitor_read_summary_nframes[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_read_summary_nframes[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MONITOR_READ_SUMMARY_NFRAMES_DATA_0)
            int_monitor_read_summary_nframes[31:0] <= (WDATA[31:0] & wmask) | (int_monitor_read_summary_nframes[31:0] & ~wmask);
    end
end

// int_monitor_write_nbytes[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_write_nbytes[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MONITOR_WRITE_NBYTES_DATA_0)
            int_monitor_write_nbytes[31:0] <= (WDATA[31:0] & wmask) | (int_monitor_write_nbytes[31:0] & ~wmask);
    end
end

// int_monitor_write_npromoted[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_write_npromoted[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MONITOR_WRITE_NPROMOTED_DATA_0)
            int_monitor_write_npromoted[31:0] <= (WDATA[31:0] & wmask) | (int_monitor_write_npromoted[31:0] & ~wmask);
    end
end

// int_monitor_write_ndropped[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_write_ndropped[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MONITOR_WRITE_NDROPPED_DATA_0)
            int_monitor_write_ndropped[31:0] <= (WDATA[31:0] & wmask) | (int_monitor_write_ndropped[31:0] & ~wmask);
    end
end

// int_monitor_write_npackets[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_write_npackets[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MONITOR_WRITE_NPACKETS_DATA_0)
            int_monitor_write_npackets[31:0] <= (WDATA[31:0] & wmask) | (int_monitor_write_npackets[31:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// config_chns_disabled
assign int_config_chns_disabled_address0         = config_chns_disabled_address0 >> 2;
assign int_config_chns_disabled_ce0              = config_chns_disabled_ce0;
assign int_config_chns_disabled_we0              = config_chns_disabled_we0;
assign int_config_chns_disabled_be0              = 1 << config_chns_disabled_address0[1:0];
assign int_config_chns_disabled_d0               = {4{7'd0, config_chns_disabled_d0}};
assign int_config_chns_disabled_address1         = ar_hs? raddr[6:2] : waddr[6:2];
assign int_config_chns_disabled_ce1              = ar_hs | (int_config_chns_disabled_write & WVALID);
assign int_config_chns_disabled_we1              = int_config_chns_disabled_write & WVALID;
assign int_config_chns_disabled_be1              = WSTRB;
assign int_config_chns_disabled_d1               = WDATA;
// monitor_read_summary_nStates
assign int_monitor_read_summary_nStates_address0 = monitor_read_summary_nStates_address0;
assign int_monitor_read_summary_nStates_ce0      = monitor_read_summary_nStates_ce0;
assign int_monitor_read_summary_nStates_we0      = monitor_read_summary_nStates_we0;
assign int_monitor_read_summary_nStates_be0      = {4{monitor_read_summary_nStates_we0}};
assign int_monitor_read_summary_nStates_d0       = monitor_read_summary_nStates_d0;
assign int_monitor_read_summary_nStates_address1 = ar_hs? raddr[3:2] : waddr[3:2];
assign int_monitor_read_summary_nStates_ce1      = ar_hs | (int_monitor_read_summary_nStates_write & WVALID);
assign int_monitor_read_summary_nStates_we1      = int_monitor_read_summary_nStates_write & WVALID;
assign int_monitor_read_summary_nStates_be1      = WSTRB;
assign int_monitor_read_summary_nStates_d1       = WDATA;
// monitor_read_errs_nFrameErrs
assign int_monitor_read_errs_nFrameErrs_address0 = monitor_read_errs_nFrameErrs_address0;
assign int_monitor_read_errs_nFrameErrs_ce0      = monitor_read_errs_nFrameErrs_ce0;
assign int_monitor_read_errs_nFrameErrs_we0      = monitor_read_errs_nFrameErrs_we0;
assign int_monitor_read_errs_nFrameErrs_be0      = {4{monitor_read_errs_nFrameErrs_we0}};
assign int_monitor_read_errs_nFrameErrs_d0       = monitor_read_errs_nFrameErrs_d0;
assign int_monitor_read_errs_nFrameErrs_address1 = ar_hs? raddr[4:2] : waddr[4:2];
assign int_monitor_read_errs_nFrameErrs_ce1      = ar_hs | (int_monitor_read_errs_nFrameErrs_write & WVALID);
assign int_monitor_read_errs_nFrameErrs_we1      = int_monitor_read_errs_nFrameErrs_write & WVALID;
assign int_monitor_read_errs_nFrameErrs_be1      = WSTRB;
assign int_monitor_read_errs_nFrameErrs_d1       = WDATA;
// monitor_read_errs_nWibErrs
assign int_monitor_read_errs_nWibErrs_address0   = monitor_read_errs_nWibErrs_address0;
assign int_monitor_read_errs_nWibErrs_ce0        = monitor_read_errs_nWibErrs_ce0;
assign int_monitor_read_errs_nWibErrs_we0        = monitor_read_errs_nWibErrs_we0;
assign int_monitor_read_errs_nWibErrs_be0        = {4{monitor_read_errs_nWibErrs_we0}};
assign int_monitor_read_errs_nWibErrs_d0         = monitor_read_errs_nWibErrs_d0;
assign int_monitor_read_errs_nWibErrs_address1   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_monitor_read_errs_nWibErrs_ce1        = ar_hs | (int_monitor_read_errs_nWibErrs_write & WVALID);
assign int_monitor_read_errs_nWibErrs_we1        = int_monitor_read_errs_nWibErrs_write & WVALID;
assign int_monitor_read_errs_nWibErrs_be1        = WSTRB;
assign int_monitor_read_errs_nWibErrs_d1         = WDATA;
// int_config_chns_disabled_read
always @(posedge ACLK) begin
    if (ARESET)
        int_config_chns_disabled_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_CONFIG_CHNS_DISABLED_BASE && raddr <= ADDR_CONFIG_CHNS_DISABLED_HIGH)
            int_config_chns_disabled_read <= 1'b1;
        else
            int_config_chns_disabled_read <= 1'b0;
    end
end

// int_config_chns_disabled_write
always @(posedge ACLK) begin
    if (ARESET)
        int_config_chns_disabled_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_CONFIG_CHNS_DISABLED_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_CONFIG_CHNS_DISABLED_HIGH)
            int_config_chns_disabled_write <= 1'b1;
        else if (WVALID)
            int_config_chns_disabled_write <= 1'b0;
    end
end

// int_config_chns_disabled_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (config_chns_disabled_ce0)
            int_config_chns_disabled_shift <= config_chns_disabled_address0[1:0];
    end
end

// int_monitor_read_summary_nStates_read
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_read_summary_nStates_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_MONITOR_READ_SUMMARY_NSTATES_BASE && raddr <= ADDR_MONITOR_READ_SUMMARY_NSTATES_HIGH)
            int_monitor_read_summary_nStates_read <= 1'b1;
        else
            int_monitor_read_summary_nStates_read <= 1'b0;
    end
end

// int_monitor_read_summary_nStates_write
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_read_summary_nStates_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_MONITOR_READ_SUMMARY_NSTATES_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_MONITOR_READ_SUMMARY_NSTATES_HIGH)
            int_monitor_read_summary_nStates_write <= 1'b1;
        else if (WVALID)
            int_monitor_read_summary_nStates_write <= 1'b0;
    end
end

// int_monitor_read_errs_nFrameErrs_read
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_read_errs_nFrameErrs_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_MONITOR_READ_ERRS_NFRAMEERRS_BASE && raddr <= ADDR_MONITOR_READ_ERRS_NFRAMEERRS_HIGH)
            int_monitor_read_errs_nFrameErrs_read <= 1'b1;
        else
            int_monitor_read_errs_nFrameErrs_read <= 1'b0;
    end
end

// int_monitor_read_errs_nFrameErrs_write
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_read_errs_nFrameErrs_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_MONITOR_READ_ERRS_NFRAMEERRS_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_MONITOR_READ_ERRS_NFRAMEERRS_HIGH)
            int_monitor_read_errs_nFrameErrs_write <= 1'b1;
        else if (WVALID)
            int_monitor_read_errs_nFrameErrs_write <= 1'b0;
    end
end

// int_monitor_read_errs_nWibErrs_read
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_read_errs_nWibErrs_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_MONITOR_READ_ERRS_NWIBERRS_BASE && raddr <= ADDR_MONITOR_READ_ERRS_NWIBERRS_HIGH)
            int_monitor_read_errs_nWibErrs_read <= 1'b1;
        else
            int_monitor_read_errs_nWibErrs_read <= 1'b0;
    end
end

// int_monitor_read_errs_nWibErrs_write
always @(posedge ACLK) begin
    if (ARESET)
        int_monitor_read_errs_nWibErrs_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_MONITOR_READ_ERRS_NWIBERRS_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_MONITOR_READ_ERRS_NWIBERRS_HIGH)
            int_monitor_read_errs_nWibErrs_write <= 1'b1;
        else if (WVALID)
            int_monitor_read_errs_nWibErrs_write <= 1'b0;
    end
end


endmodule


`timescale 1ns/1ps

module DuneDataCompressionCore_BUS_A_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

