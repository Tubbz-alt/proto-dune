#!/usr/bin/python

import sys,socket,fcntl,os,telnetlib
import subprocess
import inspect
import re
import glob
import multiprocessing
import time
import signal
from collections import OrderedDict
from xml.dom.minidom import parseString

###################################################################################

class RceComm:

    def __init__(self,shelf_id,sector):
        self.timeout=200
        self.ip=shelf_id
        self.sector=sector
        self.ssh_error    = "Error: Could not connect to the SSH socket"
        self.telnet_error = "Error: Could not connect to the TELNET socket"
        self.width=0
        self.varData=[]
        self.varValue=[]

    def guess_os(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        if (sock.connect_ex((self.ip,22)) == 0):#ssh
            r="Linux" 
        elif (sock.connect_ex((self.ip,23)) == 0):#telnet
            r="RTEMS" 
        else:
             r="Unknown"
        sock.close()        
        return r
        
    def ssh(self):
        if self.guess_os()=='Linux':
            host = "ssh root@" + self.ip
            os.system(host)
        else:
            print self.ssh_error  
      
    def ssh_cmd(self,cmd):
        if self.guess_os()=='Linux':
            host = "root@" + self.ip
            ssh = subprocess.Popen(["ssh", "%s" % host, cmd],shell=False,stdout=subprocess.PIPE,stderr=subprocess.PIPE) 
            out = ssh.stdout.readlines()
            err = ssh.stderr.readlines()     
            return (out,err)
        else:
            print self.ssh_error      

    def scp_put(self,source,dest,recursive=False):
        if self.guess_os()=='Linux':
            destPntr = 'root@' + self.ip + ':' + ''.join(dest)
            if recursive: flag="-Br"
            else: flag="-B"        
            scp = subprocess.Popen( ["scp",flag,''.join(source),destPntr],shell=False,stdout=subprocess.PIPE,stderr=subprocess.PIPE) 
            scp.wait() 
            out = scp.stdout.readlines()
            err = scp.stderr.readlines()
            self.ssh_cmd("sync")   
            return (out,err)  
        else:
            print self.ssh_error  

    def scp_get(self,source,dest,recursive=False):
        if self.guess_os()=='Linux':
            srcPntr = 'root@' + self.ip + ':' + ''.join(source)
            if recursive: flag="-Br"
            else: flag="-B" 
            scp = subprocess.Popen( ["scp",flag,srcPntr,''.join(dest)],shell=False,stdout=subprocess.PIPE,stderr=subprocess.PIPE) 
            scp.wait() 
            out = scp.stdout.readlines()
            err = scp.stderr.readlines()   
            return (out,err) 
        else:
            print self.ssh_error 

    def telnet(self):
        if self.guess_os()=='RTEMS':
            host = "telnet " + self.ip
            os.system(host)
        else:
            print self.telnet_error 

    def telnet_cmd(self,cmd):
        if self.guess_os()=='RTEMS': 
            result=""
            session=telnetlib.Telnet(self.ip,23,self.timeout)        
            session.read_until("[/] # ")
            session.write(cmd+"\r")
            if not cmd.startswith('reboot'):
                result=session.read_until("[/] # ")
                session.write("exit\r")
            session.close()
            return (result) 
        else:
            print self.telnet_error  

    def boot_linux(self):
        current_os=self.guess_os()
        if current_os=='RTEMS': 
            self.telnet_cmd("reboot -t linux")
            return "Done. Booted to Linux"
        elif current_os=='Linux':
            return "Done. Already in Linux"
        elif current_os=='Unknown': 
            return "Unkown State"

    def boot_rtems(self):
        current_os=self.guess_os()
        if current_os=='RTEMS':
            return "Already in RTEMS"
        elif current_os=='Linux':
            self.ssh_cmd("sync;reboot_rtems &")
            return "Booted to RTEMS"
        elif current_os=='Unknown':
            return "Unknown State"        
        
    def reboot(self):
        current_os=self.guess_os()
        if current_os=='RTEMS':
            self.telnet_cmd("reboot")
            return "done"
        elif current_os=='Linux':
            self.ssh_cmd("sync;reboot")
            return "done"
        elif current_os=='Unknown':
            return -1 

    def setup_ssh_keys(self):
        out,err = self.ssh_cmd("mkdir -p .ssh; touch .ssh/authorized_keys")
        if(''.join(err)!=""):
            return (out,err) 
        termCmd  = "cat " + os.path.expanduser("~")
        termCmd += "/.ssh/id_rsa.pub | " 
        termCmd += "`ssh root@"+self.ip+" 'cat >> .ssh/authorized_keys'`"
        os.system(termCmd)  
        return (out,err)  

    def shutdown_cob(self,slot):
        print "Powering Down Blades"
        cmd = "clia deactivate board "+slot+";"
        out,err = self.ssh_cmd(cmd)
        return (out,err)

    def powercycle_cob(self,slot):
        self.shutdown_cob(slot)
        print "Sleep for 5 seconds\n"
        time.sleep(5) # delays for 5 seconds
        print "\nPowering Up Blades"
        cmd = "clia activate board "+slot+";"
        out,err = self.ssh_cmd(cmd)
        return (out,err) 

    def open_switch_cob(self,slot):
        print "Force open COB Switch: Slot#"+slot
        cmd = "clia sendcmd " + hex(128+(2*int(slot))) + " 0x2e 0x08 0x0a 0x40 0x00 0x00 0x00;"
        print cmd
        out,err = self.ssh_cmd(cmd)
        return (out,err)        

    def close_switch_cob(self,slot):
        print "Force close COB Switch: Slot#"+slot
        cmd = "clia sendcmd " + hex(128+(2*int(slot))) + " 0x2e 0x08 0x0a 0x40 0x00 0x00 0x01;"
        print cmd
        out,err = self.ssh_cmd(cmd)
        return (out,err)

    def hardware_switch_cob(self,slot):
        print "Hardware COB Switch: Slot#"+slot
        cmd = "clia sendcmd " + hex(128+(2*int(slot))) + " 0x2e 0x08 0x0a 0x40 0x00 0x00 0x02;"
        print cmd
        out,err = self.ssh_cmd(cmd)
        return (out,err)        

    def open_switch_rtm(self,slot):
        print "Force open RTM Switch: Slot#"+slot
        cmd = "clia sendcmd " + hex(128+(2*int(slot))) + " 0x2e 0x08 0x0a 0x40 0x00 0x01 0x00;"
        print cmd
        out,err = self.ssh_cmd(cmd)
        return (out,err)        

    def close_switch_rtm(self,slot):
        print "Force close RTM Switch: Slot#"+slot
        cmd = "clia sendcmd " + hex(128+(2*int(slot))) + " 0x2e 0x08 0x0a 0x40 0x00 0x01 0x01;"
        print cmd
        out,err = self.ssh_cmd(cmd)
        return (out,err)

    def hardware_switch_rtm(self,slot):
        print "Hardware RTM Switch: Slot#"+slot
        cmd = "clia sendcmd " + hex(128+(2*int(slot))) + " 0x2e 0x08 0x0a 0x40 0x00 0x01 0x02;"
        print cmd
        out,err = self.ssh_cmd(cmd)
        return (out,err)     

    def getPath (self,pathIn,node):
        path = node.localName
        attr = node.getAttribute("index")
        if attr != "":
            path = path + "(" + attr + ")"
        if pathIn != "":
            path = path + "/" + pathIn
        if node.localName == "system":
            retPath = path
        else:
            retPath = self.getPath(path,node.parentNode)
        return(retPath)

    def findLeaf (self,node):
        cnt = 0
        for item in node.childNodes:
            if item.nodeType == item.ELEMENT_NODE:
                cnt = cnt + 1
                self.findLeaf(item)
        if cnt == 0:
            path = self.getPath("",node)
            if len(path) > self.width: self.width = len(path)

            if len(node.childNodes) > 0:
                self.varData.append(path)
                self.varValue.append(node.childNodes[0].nodeValue)

    def rce_dump(self,TagName):
        # Init the varibles
        sport = 8090
        ready = 0
        data = ""
        out = []
        err = []

        # Open up the socket and get the RCE server information
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(10)
        port = sport
        while ready == 0 and port < (sport+10):
            try: 
                s.connect((self.ip, port))
                ready = 1
            except Exception, e: 
                err.append("Cannot establish a connectioan to " + self.ip + ":" + str(port))
                port = port + 1
        if ready == 0:
            return (out,err)
        while "\f" not in data:
            data += s.recv(1024) 
        s.close()    

        dom = parseString(data[0:-2])
        searchNodes = dom.getElementsByTagName(TagName)

        for found in searchNodes:
            self.findLeaf(found)

        i = 0
        for line in self.varData:
            if TagName == "*":
                print line.ljust(self.width+2) + " = " + self.varValue[i]
            else:
                out.append(line.ljust(self.width+2) + " = " + self.varValue[i])
            i = i + 1      
        return (out,err) 
        
###################################################################################

class LbneAliasMap:

    def __init__ (self):
        self.slot_map= {
            ###################
            # SLAC Defined RCEs
            ###################
            ( '192.168.1.254' ):'SM-SLAC',
            ( '192.168.2.110' ):'SLAC-100',
            ( '192.168.2.111' ):'SLAC-102',
            ( '192.168.2.112' ):'SLAC-110',
            ( '192.168.2.113' ):'SLAC-112',
            ( '192.168.2.114' ):'SLAC-120',
            ( '192.168.2.115' ):'SLAC-122',
            #( '192.168.2.116' ):'SLAC-130',
            #( '192.168.2.117' ):'SLAC-132',
            ( '192.168.2.210' ):'SLAC-DTM1',
            ( '192.168.2.120' ):'SLAC-200',
            ( '192.168.2.121' ):'SLAC-202',
            ( '192.168.2.122' ):'SLAC-210',
            ( '192.168.2.123' ):'SLAC-212',
            ( '192.168.2.124' ):'SLAC-220',
            ( '192.168.2.125' ):'SLAC-222',
            ( '192.168.2.126' ):'SLAC-230',
            ( '192.168.2.127' ):'SLAC-232',
            ( '192.168.2.220' ):'SLAC-DTM2',
            ###################
            # FNAL Defined RCEs
            ###################
            ( '192.168.100.180' ):'SM-FNAL',
            ( '10.0.1.181' ):'FNAL-200',
            ( '10.0.1.182' ):'FNAL-202',
            ( '10.0.1.183' ):'FNAL-210',
            ( '10.0.1.184' ):'FNAL-212',
            ( '10.0.1.185' ):'FNAL-220',
            ( '10.0.1.186' ):'FNAL-222',
            ( '10.0.1.187' ):'FNAL-230',
            ( '10.0.1.188' ):'FNAL-232',
            ( '10.0.1.190' ):'FNAL-DTM2',
            ( '10.0.1.191' ):'FNAL-100',
            ( '10.0.1.192' ):'FNAL-102',
            ( '10.0.1.193' ):'FNAL-110',
            ( '10.0.1.194' ):'FNAL-112',
            ( '10.0.1.195' ):'FNAL-120',
            ( '10.0.1.196' ):'FNAL-122',
            ( '10.0.1.197' ):'FNAL-130',
            ( '10.0.1.198' ):'FNAL-132',
            ( '10.0.1.200' ):'FNAL-DTM1', 
            ###################
            # CERN Defined RCEs
            ###################
            ( '192.168.1.2' ):'SM-CERN',
            ( '10.73.136.22' ):'CERN-100',
            ( '10.73.136.23' ):'CERN-102',
            ( '10.73.136.24' ):'CERN-110',
            ( '10.73.136.25' ):'CERN-112',
            ( '10.73.136.26' ):'CERN-120',
            ( '10.73.136.27' ):'CERN-122',
            ( '10.73.136.28' ):'CERN-130',
            ( '10.73.136.29' ):'CERN-132',
            ( '10.73.136.30' ):'CERN-DTM1' 
            }
        self.sector_map = dict((v,k) for k, v in self.slot_map.iteritems())

    def getSectorMap(self):
        return self.sector_map

    def getSectorGroup(self,string):
        r=dict(filter(lambda item: re.search((string.upper()),item[0]),self.sector_map.iteritems()))
        r=OrderedDict(sorted(r.items(), key=lambda t: t[0]))
        return r

###################################################################################

class LbneComm(RceComm,LbneAliasMap):

    def __init__ (self,sector): 
        LbneAliasMap.__init__(self)
        self.sector=sector
        self.shelf_id=self.sector_map.get(sector)
        RceComm.__init__(self,self.shelf_id,sector)    

    def getName(self):
        return self.sector

###################################################################################

class LbneCommGroup(LbneAliasMap):

    def __init__(self,string):
        LbneAliasMap.__init__(self)
        self.last_action=list()
        self.rce_names=self.getSectorGroup(string)
        self.rce_list=list()
        self.printAction = True
        for rce in self.rce_names:
            try:
                dpm=LbneComm(rce)
            except:
                print "Failed to talk to ",rce
            else:
                self.rce_list.append(dpm)

    def worker(self,rce,string,output,args):
        output.put((rce.getName(),getattr(rce,string)(*args)))
        
    def setPrintAction(self,printAction):
        self.printAction = printAction

    def action(self,string,*params):
        self.output=multiprocessing.Queue()
        result=list(tuple())
        procs=list()
        for rce in self.rce_list:
            try:
                procs.append( multiprocessing.Process(target=self.worker,args=(rce,string,self.output,params)))
            except:
                print "Failed to create worker for action="+string +params
        for p in procs:
            p.start() 
        for check in range(60): 
            alive=True
            for p in procs:
                alive=alive and p.is_alive()
            if alive==False: break
            if string=="ssh": break
            if string=="telnet": break
            time.sleep(1)
            if string!="setup_ssh_keys": sys.stdout.write( ".")
            sys.stdout.flush()
        if(string!="ssh" and string!="telnet"): print ". done"    
        for rce in self.rce_list:
            result.append(self.output.get())
            result=sorted(result,key=lambda x:x[0])
        self.last_action=result
        if(self.printAction==True): self.show()
        return result

    def show(self):
        for rce in self.last_action:
            if  isinstance(rce[1],str):
                for l  in rce[1].split("\n"):
                    print "["+rce[0]+"]::"+l
            else:
                for l in (rce[1][0]): 
                    print  "["+rce[0]+"]::"+ 'stdout::',l.rstrip('\n')
                for l in (rce[1][1]): 
                    print "["+rce[0]+"]::"+ 'stderr::',l.rstrip("\n")

###################################################################################

def usage():
    print ""
    print "###########################################################################"
    print "usage(): ./rce_talk ELEMENT COMMAND [COMMAND_ARGS ...]"
    print "###########################################################################"
    print "List of System Commands:"
    print "------------------------"
    print "list                      list elements from dictionary sorting"
    print "guess_os                  get current OS running"
    print "reboot                    restart the current OS"    
    print "setup_ssh_keys            setup up the ssh authorized keys"
    print "setup_linux TARGET        Setup the Linux environment"
    print "ssh                       start a ssh session (only for one RCE element)"
    print "ssh_cmd CMDARG            CMDARG through ssh"
    print "scp_put [-r] SRC DEST     from SRC to RCE DEST, -r for recursive copy"
    print "scp_get [-r] SRC DEST     from RCE SRC to DEST, -r for recursive copy"    
    print "telnet                    start a telnet session (only for one RCE element)"
    print "telnet_cmd CMDARG         CMDARG through telnet"
    print "set_image SRC             set the RCE's FPGA image from SRC"
    print "powercycle_cob SLOT       powercycle ATCA's SLOT via shelf manager"
    print "open_switch_cob SLOT      force open COB switch in SLOT via shelf manager"
    print "close_switch_cob SLOT     force close COB switch in SLOT via shelf manager"
    print "hardware_switch_cob SLOT  force hardware COB switch in SLOT via shelf manager"
    print "open_switch_rtm SLOT      force open RTM switch in SLOT via shelf manager"
    print "close_switch_rtm SLOT     force close RTM switch in SLOT via shelf manager"
    print "hardware_switch_rtm SLOT  force hardware RTM switch in SLOT via shelf manager"
    print "###########################################################################"
    print "List of Application Specific Commands:"
    print "--------------------------------------"
    print "check_host                get the RCE's status"
    print "status_gui [PORT]         start the status gui, default PORT=8090" 
    print "restart_rce_software      restart the RCE's server"
    print "build_rce_software        build the rce server software on the RCE"
    print "###########################################################################"              
    print ""

###################################################################################

def main(argv):
    argc=len(argv)-2
    pwd=os.getcwd()
    if(argc<0 or  len(LbneAliasMap().getSectorGroup(argv[0]))<1): 
        if (len(argv)==1) and (argv[0]=="list"):
           result=LbneAliasMap().getSectorGroup("")
           for key,val in result.items(): print str(key),str(val)
        else:
           usage()
        return(-1)
    rceTalkDir = os.path.dirname(os.path.realpath(sys.argv[0]))
    locPath = rceTalkDir.strip('rceScripts')
    cmd = argv[1]
    g=LbneCommGroup(argv[0])
    ################################
    #   List of System Commands:   #    
    ################################
    if(cmd=='list'and argc==0):
        result=LbneAliasMap().getSectorGroup(argv[0])
        for key,val in result.items(): print str(key),str(val)
    elif (cmd=="guess_os" and argc==0):
        g.action("guess_os")
    elif (cmd=="boot_linux" and argc==0):
        g.action("boot_linux")
    elif (cmd=="boot_rtems" and argc==0):
        g.action("boot_rtems")
    elif (cmd=="reboot" and argc==0):
        g.action("reboot")        
    elif (cmd=="setup_ssh_keys" and argc==0):
        g.action("setup_ssh_keys")
    elif (cmd=="ssh" and argc==0):
        numIp = len(g.rce_names)
        if( numIp == 1):
            g.setPrintAction(False)
            g.action("ssh")    
        else:
            print "Error:\tOnly one IP is supported per ssh session"
            print "\tCurrnetly, %s IP addresses are selected" % numIp
            result=LbneAliasMap().getSectorGroup(argv[0])
            for key,val in result.items(): print "\t\t",str(key),str(val)
            return (-1)
    elif (cmd=="ssh_cmd" and argc==1):
        g.action("ssh_cmd",argv[2])
    elif (cmd=="scp_put" and argc>=2):
        i=2
        recursive=False
        if(argv[i]=='-r'): 
            recursive=True 
            i+=1
        g.action("scp_put",argv[i:-1], argv[-1],recursive)
    elif (cmd=="scp_get" and argc>=2):
        i=2
        recursive=False
        if(argv[i]=='-r'):
            recursive=True
            i+=1
        g.action("scp_get",argv[i],argv[i+1],recursive)
    elif (cmd=="telnet" and argc==0):
        numIp = len(g.rce_names)
        if( numIp == 1):
            g.setPrintAction(False)
            g.action("telnet")    
        else:
            print "Error:\tOnly one IP is supported per telnet session"
            print "\tCurrnetly, %s IP addresses are selected" % numIp
            result=LbneAliasMap().getSectorGroup(argv[0])
            for key,val in result.items(): print "\t\t",str(key),str(val)
            return (-1)
    elif (cmd=="telnet_cmd" and argc==1):
        g.action("telnet_cmd",argv[2])
    elif (cmd=="set_image" and argc==1):
        fName = pwd+"/.fpga.bit"
        os.system("rm -f "+fName)
        fExt = argv[2].replace('..','')
        fExt = fExt.split(".")[1:]
        extLen = len(fExt)
        if ( (extLen == 2) and (fExt[0]=="bit") and (fExt[1]=="gz") ):
            os.system("gzip -c -d -f "+argv[2]+" > "+fName)
        elif ( (extLen == 1) and (fExt[0]=="bit") ):
            fName = argv[2]
        else:
            print "Error:\tInvalid file extension (must be a .bit or .bit.gz file)"
            return (-1)
        g.action("scp_put",fName,"/mnt/boot/fpga.bit")
        g.action("ssh_cmd","sync; ls -l /mnt/boot/fpga.bit")
    elif (cmd=="powercycle_cob" and argc==1):
        g.action("powercycle_cob",argv[2])
    elif (cmd=="open_switch_cob" and argc==1):
        g.action("open_switch_cob",argv[2])
    elif (cmd=="close_switch_cob" and argc==1):
        g.action("close_switch_cob",argv[2])
    elif (cmd=="hardware_switch_cob" and argc==1):
        g.action("hardware_switch_cob",argv[2])
    elif (cmd=="open_switch_rtm" and argc==1):
        g.action("open_switch_rtm",argv[2])
    elif (cmd=="close_switch_rtm" and argc==1):
        g.action("close_switch_rtm",argv[2])
    elif (cmd=="hardware_switch_rtm" and argc==1):
        g.action("hardware_switch_rtm",argv[2])
    #############################################
    #   List of Application Specific Commands:  #    
    #############################################  
    elif (cmd=="check_host" and argc==0):
        ssh_cmd  = "uname -r; "
        ssh_cmd += "uptime; "
        ssh_cmd += "/mnt/host/protoDUNE/rceData/dtm_src/bin/firmware_version; "
        ssh_cmd += "sysinfo|grep 'bitfile'; "
        ssh_cmd += "ps auxww | grep rceServer | grep -v grep;"
        ssh_cmd += "df -h ."
        g.action("ssh_cmd",ssh_cmd)
    elif (cmd=="rce_dump" and argc==1):
        g.action("rce_dump",argv[2])
    elif (cmd=="start_gui" and argc<=1):
        result=LbneAliasMap().getSectorGroup(argv[0])
        ipList=''
        for key,val in result.items(): 
            if(ipList==''):
                if(argc==0):
                    ipList = val + " 8090"
                else:
                    ipList = val + argv[2]
            else:
                ipList += " " + val
        binCmd = locPath + 'bin/cntrlGui ' + ipList
        os.system(binCmd)     
    elif (cmd=="status_gui" and argc<=1):
        result=LbneAliasMap().getSectorGroup(argv[0])
        ipList=''
        for key,val in result.items(): 
            if(ipList==''):
                if(argc==0):
                    ipList = val + " 8090"
                else:
                    ipList = val + argv[2]
            else:
                ipList += " " + val
        binCmd = locPath + 'bin/statusGui ' + ipList
        os.system(binCmd)     
    elif (cmd=="restart_rce_software" and argc==0):
        ssh_cmd  = "cd /mnt/host/protoDUNE; "
        ssh_cmd += "killall -q rceServer; "
        ssh_cmd += "source setup_cob.csh; "
        ssh_cmd += "/bin/axistreamdma.sh"
        g.action("ssh_cmd",ssh_cmd)
    elif (cmd=="build_rce_software" and argc==0):
        ssh_cmd  = "cd /mnt/host/protoDUNE; "
        ssh_cmd += "killall -q rceServer; "
        ssh_cmd += "source setup_cob.csh; "
        ssh_cmd += "make; "
        ssh_cmd += "nohup /mnt/host/protoDUNE/rceScripts/start_server.csh"
        g.action("ssh_cmd",ssh_cmd)
    elif (cmd=="setup_linux" and argc==1):
        
        if (argv[2] == 'slac'):
            pass
        elif (argv[2] == 'cern'):
            pass
        else:
            print usage()
            return (-1)
        
        # Setup rce_start.service
        g.action("scp_put",(locPath+"rceData/axistreamdma.sh."+argv[2]), "/bin/axistreamdma.sh")
        g.action("scp_put",(locPath+"rceData/axistreamdma.service"), "/usr/lib/systemd/system/axistreamdma.service")
        g.action("ssh_cmd","systemctl enable axistreamdma")
        g.action("ssh_cmd","rm -f /etc/rc.local")
        g.action("ssh_cmd","rm -f /etc/resolv.conf")
        
        # Package Update
        g.action("ssh_cmd","pacman -U --noconfirm /opt/RCE_SDK/tgt/linux/packages/extra/*.xz")
        
        # NFS and account setup
        g.action("ssh_cmd","mkdir -p /mnt/host")
        g.action("ssh_cmd","chsh --shell /bin/tcsh")
        
        # SYNC the SD memory card
        g.action("ssh_cmd","sync; sync; sync")
        
        # Reboot with the /mnt/boot/fpga.bit
        # Refer https://confluence.slac.stanford.edu/x/CrufD
        g.action("ssh_cmd","reboot_rce -b 1")
        
    else:
        print usage()
        return (-1)

###################################################################################

if __name__ == "__main__":
    ret=main(sys.argv[1:])
    exit(ret)

